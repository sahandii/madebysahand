// Deps
import { FC, useEffect, useState } from "react";
import { withRouter, useRouter } from "next/router";
import styled from "styled-components";
import Head from "next/head";
import Image, { StaticImageData } from "next/image";
import { isSafari } from "react-device-detect";
import { motion } from "framer-motion";
// Data
import { Project, Media } from "@/data/projects";
// Components
import Layout from "@/components/Layout";
import { InstagramEmbed, YouTubeEmbed } from "react-social-media-embed";

interface caseProps {
	router: any;
	projects: Project[];
	poster: StaticImageData | undefined;
	mp4: string;
	webm: string;
	desc: string;
}

const container = {
	hidden: { opacity: 1 },
	show: {
		opacity: 1,
		transition: {
			// delayChildren: 0.25,
			staggerChildren: 0.15,
		},
	},
};
const item = {
	hidden: { x: 0, y: "5vh", opacity: 0 },
	show: {
		x: 0,
		y: 0,
		opacity: 1,
		transition: {
			//
			type: "tween",
			ease: "anticipate",
			duration: 1,
		},
	},
};

const CaseCSS = styled.div``;

export const Case: FC<caseProps> = ({ router: { query }, projects }) => {
	const router = useRouter();
	const [element, setElement] = useState<Project | null>(null);
	useEffect(() => {
		if (!router.isReady) return;
		for (let i = 0; i < projects.length; i++) {
			const element = projects[i];
			if (element.slug === router.query.case) {
				setElement(element);
			}
		}
	}, [element, router.isReady]);

	return (
		element && (
			<CaseCSS>
				<Head>
					<title>{element.title} | Sahand Porkar</title>
					<meta name="description" content="Generated by create next app" />
					<meta name="viewport" content="width=device-width, initial-scale=1" />
					<link rel="icon" href="/favicon.ico" />
				</Head>
				<Layout>
					<motion.div initial="hidden" animate="show" variants={container}>
						<main className="mt-5">
							<div className="px-6 container">
								<div className="sticky top-0 py-4 col-span-12 z-[90] bg-zinc-50">
									<div className="text-container">
										<h1 className="text-lg font-bold">{element.title}</h1>
										<h2 className="font-bold text-[.65rem] uppercase mt-1">
											<span className="mr-3 tracking-wider">{element.category} </span>
											{element &&
												element.subcategories.map((item: string, i: number, array: Array<string>) => {
													if (array.length - 1 === i) {
														return <span key={i++}>{item}</span>;
													}
													return (
														<span key={i++} className="mr-3 tracking-wider">
															{item}
														</span>
													);
												})}
										</h2>
									</div>
								</div>
								<div className="grid grid-cols-12">
									{/* <h3 className="col-span-12 z-100 font-bold text-[11px] uppercase tracking-wider">
										<span className="mr-1 inline-flex">&#9642;</span>
										{element.client}
									</h3> */}
									<motion.div variants={item} className="col-span-12 tracking-wide mb-5 md:mb-8">
										<div className="grid grid-cols-12">
											{element.description && (
												<div className="mb-5 sm:col-span-12 col-span-12">
													<p>{element.description}</p>
												</div>
											)}
										</div>
									</motion.div>
									<motion.div variants={item} className="col-span-12 bg-zinc-50">
										<div className="grid grid-cols-12 gap-[10px]">
											{element.media?.videos &&
												element.media.videos.map((video, i, arr) => {
													return (
														<div
															className={`${
																"col-span-12 mb-10"
																// if last element = "mb-10"
																// (arr.length - 1 === i && " mb-10 ")
															}`}
														>
															<video //
																preload="none"
																key={i++}
																controls
																controlsList="nodownload"
																playsInline={true}
																poster={video.poster?.src}
																src={isSafari ? video.mp4 : video.webm}
															></video>
															{video.desc && <p className="text-center mt-5 pl-2 col-span-12 font-medium">{video.desc}</p>}
														</div>
													);
												})}
											{element.media?.images &&
												element.media.images.map((image, i, arr) => {
													return (
														<div
															className={`${
																"col-span-12 mb-3 md:mb-10"
																// if last element = "mb-10"
																// (arr.length - 1 === i && " mb-10 ")
															}`}
														>
															<Image //
																draggable={false}
																key={i++}
																className="w-100"
																placeholder="blur"
																blurDataURL={image.data.blurDataURL}
																src={image.data.src}
																width={image.data.width}
																height={image.data.height}
																alt={image?.desc}
															/>
															{image?.desc && <p className="text-center mt-5 pl-2 col-span-12 font-medium">{image?.desc}</p>}
														</div>
													);
												})}
											{/* <div className="col-span-12 md:col-span-6 lg:col-span-4">
												<InstagramEmbed url="https://www.instagram.com/reel/ChCtk1bDj2H/" width={"100%"} />
											</div> */}
										</div>
									</motion.div>
								</div>
							</div>
						</main>
					</motion.div>
				</Layout>
			</CaseCSS>
		)
	);
};

export default withRouter(Case);
