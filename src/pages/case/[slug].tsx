// pages/case/[slug].tsx

import { useRouter } from "next/router";
import styled from "styled-components";
import Head from "next/head";
import Image from "next/image";
import { isSafari } from "react-device-detect";
import { motion } from "framer-motion";
import Motion from "@/components/Motion";
import { GetStaticProps, GetStaticPaths } from "next";
import { fetchProjectsOnce, fetchProjectBySlug } from "@/firebase/firebaseOperations";
import { Project } from "@/data/projects";

const container = {
	hidden: { opacity: 1 },
	show: {
		opacity: 1,
		transition: {
			staggerChildren: 0.15,
		},
	},
};

const item = {
	hidden: { x: 0, y: "5vh", opacity: 0 },
	show: {
		x: 0,
		y: 0,
		opacity: 1,
		transition: {
			type: "tween",
			ease: "anticipate",
			duration: 1,
		},
	},
};

const SlugCSS = styled.div``;

interface ProjectPageProps {
	project: Project;
}

const ProjectPage: React.FC<ProjectPageProps> = ({ project }) => {
	const router = useRouter();

	if (router.isFallback) {
		return <div></div>;
	}

	if (!project) {
		return <div>Project not found</div>;
	}

	return (
		<SlugCSS>
			<Head>
				<title>{project.title} | Sahand Porkar</title>
				<meta name="description" content="Generated by create next app" />
				<meta name="viewport" content="width=device-width, initial-scale=1" />
				<link rel="icon" href="/favicon.ico" />
				{project.status === "publish" && <meta name="robots" content="index, follow" />}
				{project.status === "private" && <meta name="robots" content="noindex, nofollow" />}
			</Head>
			<Motion>
				<motion.div initial="hidden" animate="show" variants={container}>
					<main className="mt-5">
						<div className="container px-6">
							<div className="sticky top-0 z-[90] col-span-12 bg-zinc-50 py-4">
								<div className="text-container">
									<h1 className="text-lg font-bold">{project.title}</h1>
									<h2 className="mt-1 text-[.65rem] font-bold uppercase">
										<span className="mr-3 tracking-wider">{project.categories?.[0]} </span>
										{project.categories?.slice(1).map((item: string, i: number, array: Array<string>) => (
											<span key={i} className={i !== array.length - 1 ? "mr-3 tracking-wider" : ""}>
												{item}
											</span>
										))}
									</h2>
								</div>
							</div>
							<div className="grid grid-cols-12">
								<motion.div variants={item} className="col-span-12 mb-5 md:mb-8">
									<div className="grid grid-cols-12">
										{project.description && (
											<div className="col-span-12 mb-5 sm:col-span-12">
												<p>{project.description}</p>
											</div>
										)}
									</div>
								</motion.div>
								<motion.div variants={item} className="col-span-12 bg-zinc-50">
									<div className="grid grid-cols-12 gap-[10px]">
										{project.media?.videos?.map((video, i) => (
											<div key={i} className="col-span-12 mb-10">
												<video preload="none" controls controlsList="nodownload" playsInline poster={video.poster?.src} src={isSafari ? video.mp4 : video.webm}></video>
												{video.desc && <p className="col-span-12 mt-5 pl-2 text-center font-medium">{video.desc}</p>}
											</div>
										))}
										{project.media?.images?.map((image, i) => (
											<div key={i} className="col-span-12 mb-3 md:mb-10">
												<Image draggable={false} className="w-100" src={image.data.src} width={image.data.width} height={image.data.height} alt={image?.desc} />
												{image?.desc && <p className="col-span-12 mt-5 pl-2 text-center font-medium">{image?.desc}</p>}
											</div>
										))}
									</div>
								</motion.div>
							</div>
						</div>
					</main>
				</motion.div>
			</Motion>
		</SlugCSS>
	);
};

export const getStaticPaths: GetStaticPaths = async () => {
	const projects = await fetchProjectsOnce();
	const paths = projects
		.filter((project) => project.status === "publish" || project.status === "private")
		.map((project) => ({
			params: { slug: project.slug },
		}));

	return { paths, fallback: true };
};

export const getStaticProps: GetStaticProps = async ({ params }) => {
	if (!params || typeof params.slug !== "string") {
		return {
			notFound: true,
		};
	}

	const project = await fetchProjectBySlug(params.slug);

	if (!project || project.status === "draft") {
		return {
			notFound: true,
		};
	}

	return {
		props: {
			project,
		},
		revalidate: 5,
	};
};

export default ProjectPage;
